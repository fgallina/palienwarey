# -*- coding: utf-8 -*-
import argparse
import sys

from usb.core import USBError, find

from .constants import (
    RESET_ALL_LIGHTS_ON, RESET_ALL_LIGHTS_OFF, VENDOR_ID, LEDS_TO_SCAN,
    SUCCESS, ERROR_DEVICE_NOT_FOUND, ERROR_DEVICE_CANNOT_TAKE_OVER,
    ERROR_DEVICE_TIMEOUT)
from .defines import get_machine
from .logconf import logger, set_log_level, set_log_formatter, log_error_code
from .parse import parse_color
from .protocol import (
    connect, wait_ok, cmd_set_color, cmd_end_loop, cmd_reset,
    cmd_transmit_execute)


__all__ = ['LEDS_TO_SCAN', 'y_or_n', 'lsdetect', 'read_input']


try:
    read_input = raw_input
except NameError:
    read_input = input


def y_or_n(prompt, default=False, yes="y", no="n"):
    """
    >>> y_or_n("continue? [y]/n ", yes="y", no="n")
    continue? [y]/n y
    True
    >>> y_or_n("continue? [y]/n ", yes="y", no="n")
    continue? [y]/n n
    False
    >>> y_or_n("continue? [y]/n ", yes="y", no="n")
    continue? [y]/n q
    continue? [y]/n s
    continue? [y]/n e
    continue? [y]/n
    True
    >>> y_or_n("continue? [y]/n ", yes="y", no="n", default=False)
    continue? [y]/n q
    continue? [y]/n s
    continue? [y]/n
    False
    """
    opt = None
    while opt not in ["", yes, no]:
        opt = read_input(prompt)
    if not opt:
        return default
    return not opt == no


def lsdetect(color='ffffff', log_level='info', verbosity='simple'):
    """
    Alienware detection tool for the masses.

    Use this to find out your led addresses.
    """
    set_log_level(log_level)
    set_log_formatter(verbosity)

    try:
        machine = get_machine()
        logger.info('Detected %s', machine['name'])
        device = machine['device']
        product_id = machine['uid']
    except EnvironmentError:
        logger.info('Cannot find machine')
        product_id = None
        while product_id is None:
            try:
                product_id = int(read_input('Product ID (ex: 0x0525): '), 16)
            except ValueError:
                pass
            except KeyboardInterrupt:
                logger.info('kthxbye')
                return SUCCESS
        device = find(idVendor=VENDOR_ID, idProduct=product_id)
        if device is None:
            return log_error_code(ERROR_DEVICE_NOT_FOUND)

    try:
        # This is the first step, we need to take control of the detected
        # device. We try really hard to connect, should be safe in most
        # situations for most machines.
        connect(device)
    except USBError:
        logger.error('Cannot take over device')
        return log_error_code(ERROR_DEVICE_CANNOT_TAKE_OVER)

    try:
        wait_ok(device)
    except USBError:
        return log_error_code(ERROR_DEVICE_TIMEOUT)

    idx = 0
    print ('Shutting down all leds, remember to use your touchpad '
           'so you can acknowledge when its lights turns on.')
    try:
        cmd_reset(device, RESET_ALL_LIGHTS_OFF)
        wait_ok(device)
        cmd_reset(device, RESET_ALL_LIGHTS_ON)
    except USBError:
        return log_error_code(ERROR_DEVICE_TIMEOUT)

    machine_name = read_input("Machine name: ")
    mode_version = 'MODE_VERSION_1'
    try:
        color = parse_color(color)
        idx = 0
        detected = []
        for address in LEDS_TO_SCAN:
            logger.info('Trying led 0x%.4x', address)
            try:
                wait_ok(device)
                cmd_set_color(device, idx, address, color)
                cmd_end_loop(device)
                cmd_transmit_execute(device)
            except USBError:
                return log_error_code(ERROR_DEVICE_TIMEOUT)
            changed = y_or_n('Did some led turned on? (y/[n]): ')
            if changed:
                name = read_input('Describe it (ex: Middle Left Keyboard)?: ')
                idx += 1
                detected.append((address, name))
        if not y_or_n('Does your machine use leds when sleeping on battery? '
                      '[Newer Alienware devices don\'t. '
                      'Answer "n" if you are not sure] (y/[n]): '):
            mode_version = 'MODE_VERSION_2'
    except KeyboardInterrupt:
        print ('')
    finally:
        print ('')
        print ('# Autogenerated machine definition:')
        print ('defmachine(0x%.4x, "%s", ( ' % (product_id, machine_name))
        for zone in detected:
            address, name = zone
            print ('    defzone(0x%.4x, "%s"),' % (address, name))
        print ('), %s)' % mode_version)
    return SUCCESS


def main():
    parser = argparse.ArgumentParser(
        description='Alienware led detection and testing tool')
    parser.add_argument('-c', '--color', default='ffffff',
                        help='Color to test.')
    parser.add_argument('-l', '--log-level', default='info',
                        choices=['debug', 'info', 'warn', 'error', 'critical'],
                        help='Set logging level.')
    parser.add_argument('-v', '--verbosity', choices=['simple', 'verbose'],
                        default='simple', help='Set verbosity of logs.')

    return lsdetect(**vars(parser.parse_args()))


if __name__ == "__main__":
    sys.exit(main())
